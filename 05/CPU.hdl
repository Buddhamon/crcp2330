// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Decoding
        Not(in = instruction[15], out = aInstruction);
        Not(in = aInstruction, out = cInstruction);

        And(a = cInstruction, b = instruction[5], out = w1); // first step for aLoad
        Or(a = aInstruction, b = w1, out = aLoad);
        And(a = cInstruction, b = instruction[4], out = dLoad);
        And(a = cInstruction, b = instruction[3], out = writeM);

    // Mux
        Mux16(a = aluOut, b = instruction, sel = aLoad, out = aIn);

    // A Register
        ARegister(in = aIn, load = aLoad, out = aOut, out[0..14] = addressM);

    // D Register
        DRegister(in = aluOut, load = dLoad, out = dOut);

    // Mux
        Mux16(a = aOut, b = inM, sel = instruction[12], out = aORm);

    // Program Counter
        PC(in = aOut, load = false, inc = true, reset = reset, out[0..14] = pc);

    // ALU
        ALU(x = dOut, y = aORm, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = aluOut, out = outM, zr = zr, ng = ng);

}

// 0000000000000010 - @R2
// 1110101010001000 - M=0
// 0000000000000001 - @R1
// 1111110000010000 - D=M
// 0000000000010000 - @temp
// 1110001100001000 - M=D
// 0000000000000000 - @R0
// 1111110000010000 - D=M
// 0000000000010110 - @END
// 1110001100000010 - D;JEQ
// 0000000000010000 - @temp
// 1111110000010000 - D=M
// 0000000000010110 - @END
// 1110001100000010 - D;JEQ
// 0000000000000000 - @R0
// 1111110000010000 - D=M
// 0000000000000010 - @R2
// 1111000010001000 - M=D+M
// 0000000000010000 - @temp
// 1111110010001000 - M=M-1
// 0000000000001010 - @MULTLOOP
// 1110101010000111 - 0;JMP
// 0000000000010110 - @END
// 1110101010000111 - 0;JMP

// CHIP Register {
//     IN in[16], load;
//     OUT out[16];

// CHIP Mux16 {
//     IN a[16], b[16], sel;
//     OUT out[16];

//CHIP ALU {
//    IN  
//        x[16], y[16],  // 16-bit inputs        
//        zx, // zero the x input?
//        nx, // negate the x input?
//        zy, // zero the y input?
//        ny, // negate the y input?
//        f,  // compute out = x + y (if 1) or x & y (if 0)
//        no; // negate the out output?
//
//    OUT 
//        out[16], // 16-bit output
//        zr, // 1 if (out == 0), 0 otherwise
//        ng; // 1 if (out < 0),  0 otherwise

// CHIP PC {
//     IN in[16],load,inc,reset;
//     OUT out[16];




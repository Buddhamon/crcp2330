// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

    DMux4Way(in = load, sel = address[14..15], a = r0, b = r1, c = r2, d = r3);
    RAM16K(in = in, load = load, address = address, out = out);
    Screen(in = in, load = load, address = address, out = out);
    Keyboard(out = out);

    RAM4K(in = in, load = r0, address = address[0..11], out = out0);
    RAM4K(in = in, load = r1, address = address[0..11], out = out1);
    RAM4K(in = in, load = r2, address = address[0..11], out = out2);
    RAM4K(in = in, load = r3, address = address[0..11], out = out3);
    Mux4Way16(a = out0, b = out1, c = out2, d = out3, sel = address[12..13], out = out);
    
}

//CHIP DMux4Way {
//    IN in, sel[2];
//    OUT a, b, c, d;

//CHIP RAM16K {
//    IN in[16], load, address[14];
//    OUT out[16];

//CHIP Screen {
//    IN  in[16],    // what to write
//    load,          // write-enable bit
//    address[13];   // where to read/write
//    OUT out[16];   // Screen value at the given address

//CHIP Keyboard {
//    OUT out[16];   // The ASCII code of the pressed key, 
//                   // or 0 if no key is currently pressed, 
//                   // or one the special codes listed in Figure 5.5.





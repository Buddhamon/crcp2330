// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

    DMux4Way(in = load, sel = address[13..14], a = rom1, b = rom2, c = screen, d = keyboard);
    Or(a = rom1, b = rom2, out = rom);
    RAM16K(in = in, load = rom, address = address[0..13], out = romOut);
    Screen(in = in, load = screen, address = address[0..12], out = screenOut);
    Keyboard(out = keyboardOut);

    Mux4Way16(a = romOut, b = romOut, c = screenOut, d = keyboardOut, sel = address[13..14], out = out);
    
}
// ROM      0000H		0000 0000 0000 0000
//						0011 1111 1111 1111

// Screen   4000H  		0100 0000 0000 0000
//						0101 1111 1111 1111

// Keyboard 6000H  		0110 0000 0000 0000
//

//CHIP DMux4Way {
//    IN in, sel[2];
//    OUT a, b, c, d;

//CHIP RAM16K {
//    IN in[16], load, address[14];
//    OUT out[16];

//CHIP Screen {
//    IN  in[16],    // what to write
//    load,          // write-enable bit
//    address[13];   // where to read/write
//    OUT out[16];   // Screen value at the given address

//CHIP Keyboard {
//    OUT out[16];   // The ASCII code of the pressed key, 
//                   // or 0 if no key is currently pressed, 
//                   // or one the special codes listed in Figure 5.5.

//CHIP Mux8Way16 {
//    IN a[16], b[16], c[16], d[16],
//       e[16], f[16], g[16], h[16],
//       sel[3];
//    OUT out[16];


